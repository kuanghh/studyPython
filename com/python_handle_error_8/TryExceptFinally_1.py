# 错误处理

# 高级语言通常都内置了一套try...except...finally...的错误处理机制，Python也不例外。


def division(num1,num2):
    try:
      result = num1 / num2
    except ZeroDivisionError as e:
        print('except:', e)
    finally:
        print('finally...')

# 创建的错误异常类
# https://docs.python.org/3/library/exceptions.html#exception-hierarchy


# 调用栈
# 如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出。

# -----------------------------------------------------------------------------------------
# 记录错误
# 如果不捕获错误，自然可以让Python解释器来打印出错误堆栈，但程序也被结束了。既然我们能捕获错误，就可以把错误堆栈打印出来，然后分析错误原因，同时，让程序继续执行下去。
#
# Python内置的logging模块可以非常容易地记录错误信息：


# ----------------------------------------------------------------------------------------------
# 抛出错误
# 因为错误是class，捕获一个错误就是捕获到该class的一个实例。因此，错误并不是凭空产生的，而是有意创建并抛出的。Python的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出错误。
#
# 如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后，用raise语句抛出一个错误的实例：



